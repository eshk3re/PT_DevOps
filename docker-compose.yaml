version: '3'

services:
  bot:
    image: bot_image
    depends_on:
      - db
    networks:
      - bot_network
    container_name: bot
    build:
      context: ./bot
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - pg_logs:/var/log

  db:
    image: db_image
    networks:
      - bot_network
    container_name: db
    build:
      context: ./db
      dockerfile: Dockerfile
      args:
        DB_USER: ${DB_USER}
        DB_REPL_USER: ${DB_REPL_USER}
        DB_REPL_PASSWORD: ${DB_REPL_PASSWORD}
        DB_DATABASE: ${DB_DATABASE}
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_REPLICATION_USER: ${DB_REPL_USER}  
      POSTGRES_REPLICATION_PASSWORD: ${DB_REPL_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    env_file:
      - .env
    volumes:
      - pg_logs:/var/log

  db_repl:
    image: db_repl_image
    networks:
      - bot_network
    container_name: db_repl
    build:
      context: ./db_repl
      dockerfile: Dockerfile
      args:  
        DB_REPL_HOST: ${DB_REPL_HOST}
        DB_REPL_PORT: ${DB_REPL_PORT}
        DB_REPL_USER: ${DB_REPL_USER}
        DB_REPL_PASSWORD: ${DB_REPL_PASSWORD}
        DB_PORT: ${DB_PORT}
        DB_HOST: ${DB_HOST}
        DB_USER: ${DB_USER}
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}  
      POSTGRES_USER: ${DB_USER}  
      POSTGRES_REPLICATION_USER: ${DB_REPL_USER}  
      POSTGRES_REPLICATION_PASSWORD: ${DB_REPL_PASSWORD}
    depends_on:
      - db
    env_file:
      - .env

networks:
  bot_network:
    driver: bridge

volumes:
  pg_logs:
